// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// projection
NumericVector projection(double dref, double d1, double d2);
RcppExport SEXP _vegclust_projection(SEXP drefSEXP, SEXP d1SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dref(drefSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    rcpp_result_gen = Rcpp::wrap(projection(dref, d1, d2));
    return rcpp_result_gen;
END_RCPP
}
// distanceToSegment
NumericVector distanceToSegment(double dref, double d1, double d2);
RcppExport SEXP _vegclust_distanceToSegment(SEXP drefSEXP, SEXP d1SEXP, SEXP d2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dref(drefSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    rcpp_result_gen = Rcpp::wrap(distanceToSegment(dref, d1, d2));
    return rcpp_result_gen;
END_RCPP
}
// twoSegmentDistance
double twoSegmentDistance(NumericMatrix dmat12, String type);
RcppExport SEXP _vegclust_twoSegmentDistance(SEXP dmat12SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat12(dmat12SEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(twoSegmentDistance(dmat12, type));
    return rcpp_result_gen;
END_RCPP
}
// triangleinequality
bool triangleinequality(double d1, double d2, double d3, double tol);
RcppExport SEXP _vegclust_triangleinequality(SEXP d1SEXP, SEXP d2SEXP, SEXP d3SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< double >::type d3(d3SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(triangleinequality(d1, d2, d3, tol));
    return rcpp_result_gen;
END_RCPP
}
// ismetric
bool ismetric(NumericMatrix dmat, double tol);
RcppExport SEXP _vegclust_ismetric(SEXP dmatSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ismetric(dmat, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vegclust_projection", (DL_FUNC) &_vegclust_projection, 3},
    {"_vegclust_distanceToSegment", (DL_FUNC) &_vegclust_distanceToSegment, 3},
    {"_vegclust_twoSegmentDistance", (DL_FUNC) &_vegclust_twoSegmentDistance, 2},
    {"_vegclust_triangleinequality", (DL_FUNC) &_vegclust_triangleinequality, 4},
    {"_vegclust_ismetric", (DL_FUNC) &_vegclust_ismetric, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_vegclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
